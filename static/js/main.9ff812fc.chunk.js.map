{"version":3,"sources":["components/TodoItems/TodoItem.jsx","components/AddItem/AddItem.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteItem","ListItems","length","map","item","key","id","className","name","age","onClick","AddItem","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","onSubmit","this","type","placeholder","onChange","Component","App","filter","addItem","Math","random","push","TodoItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAmCeA,G,MAhCG,SAACC,GAAW,IACpBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,WAGTC,EAFOF,EAAMG,OAGjBH,EAAMI,KAAI,SAACC,GACT,OACE,yBAAKC,IAAKD,EAAKE,IACb,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAWI,EAAKE,MAC1D,IADH,YAQN,wDAEF,OACE,yBAAKC,UAAU,aACb,6BACE,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEDN,K,OCoBQU,G,kNA9CbC,MAAQ,CACNJ,KAAM,IACNC,IAAK,K,EAGPI,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAG5BC,aAAe,SAACJ,GAEd,GADAA,EAAEK,iBAC0B,KAAxBL,EAAEE,OAAOR,KAAKS,MAChB,OAAO,EAEP,EAAKnB,MAAMa,QAAQ,EAAKC,OACxB,EAAKG,SAAS,CACZP,KAAM,GACNC,IAAK,M,uDAKT,OACE,6BACE,0BAAMW,SAAUC,KAAKH,cACnB,2BACEI,KAAK,OACLC,YAAY,qBACZjB,GAAG,OACHkB,SAAUH,KAAKR,aACfI,MAAOI,KAAKT,MAAMJ,OAEpB,2BACEc,KAAK,SACLC,YAAY,oBACZjB,GAAG,MACHkB,SAAUH,KAAKR,aACfI,MAAOI,KAAKT,MAAMH,MAEpB,2BAAOa,KAAK,SAASL,MAAM,c,GAzCfQ,cCkCPC,E,4MAjCbd,MAAQ,CACNb,MAAO,CACL,CAAEO,GAAI,EAAGE,KAAM,QAASC,IAAK,IAC7B,CAAEH,GAAI,EAAGE,KAAM,OAAQC,IAAK,IAC5B,CAAEH,GAAI,EAAGE,KAAM,QAASC,IAAK,M,EAIjCT,WAAa,SAACM,GACZ,IAAIP,EAAQ,EAAKa,MAAMb,MAAM4B,QAAO,SAACvB,GACnC,OAAOA,EAAKE,KAAOA,KAErB,EAAKS,SAAS,CAAEhB,W,EAGlB6B,QAAU,SAACxB,GACTA,EAAKE,GAAKuB,KAAKC,SACf,IAAI/B,EAAQ,EAAKa,MAAMb,MACvBA,EAAMgC,KAAK3B,GACX,EAAKW,SAAS,CAAEhB,W,uDAGhB,OACE,yBAAKQ,UAAU,iBACb,wBAAIA,UAAU,eAAd,mBAEA,kBAACyB,EAAD,CAAWjC,MAAOsB,KAAKT,MAAMb,MAAOC,WAAYqB,KAAKrB,aACrD,kBAAC,EAAD,CAASW,QAASU,KAAKO,e,GA5BbH,aCSEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ff812fc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TodoItems.css\";\n\nconst TodoItems = (props) => {\n  const { items, deleteItem } = props;\n  let length = items.length;\n\n  const ListItems = length ? (\n    items.map((item) => {\n      return (\n        <div key={item.id}>\n          <span className=\"name\">{item.name}</span>\n          <span className=\"age\">{item.age}</span>\n          <span className=\"action icon\" onClick={() => deleteItem(item.id)}>\n            {\" \"}\n            &times;\n          </span>\n        </div>\n      );\n    })\n  ) : (\n    <p> There is no item to show</p>\n  );\n  return (\n    <div className=\"ListItems\">\n      <div>\n        <span className=\"name title\">Name</span>\n        <span className=\"age title\">Age</span>\n        <span className=\"action title\">Action</span>\n      </div>\n      {ListItems}\n    </div>\n  );\n};\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\nimport \"./AddItem.css\";\n\nclass AddItem extends Component {\n  state = {\n    name: \" \",\n    age: \" \",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (e.target.name.value === \"\") {\n      return false;\n    } else {\n      this.props.AddItem(this.state);\n      this.setState({\n        name: \"\",\n        age: \"\",\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"enter your name...\"\n            id=\"name\"\n            onChange={this.handleChange}\n            value={this.state.name}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"enter your age...\"\n            id=\"age\"\n            onChange={this.handleChange}\n            value={this.state.age}\n          />\n          <input type=\"submit\" value=\"Add\" />\n        </form>\n      </div>\n    );\n  }\n}\nexport default AddItem;\n","import React, { Component } from \"react\";\nimport TodoItems from \"./components/TodoItems/TodoItem\";\nimport AddItem from \"./components/AddItem/AddItem\";\nclass App extends Component {\n  state = {\n    items: [\n      { id: 1, name: \"pippi\", age: 20 },\n      { id: 2, name: \"lucy\", age: 26 },\n      { id: 3, name: \"james\", age: 30 },\n    ],\n  };\n\n  deleteItem = (id) => {\n    let items = this.state.items.filter((item) => {\n      return item.id !== id;\n    });\n    this.setState({ items });\n  };\n\n  addItem = (item) => {\n    item.id = Math.random();\n    let items = this.state.items;\n    items.push(item);\n    this.setState({ items });\n  };\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"text-center\">Contactlist App</h1>\n\n        <TodoItems items={this.state.items} deleteItem={this.deleteItem} />\n        <AddItem AddItem={this.addItem} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}